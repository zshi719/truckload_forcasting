# load packages
library(shinydashboard)
library(dashboardthemes)
library(readxl)
library(dplyr)
library(ggplot2)
library(cowplot)
library(leaflet)
library(sf)
library(tidycensus)
library(rnaturalearth)
library(geojsonio)
library(conflicted)
conflicted::conflict_prefer("select", "dplyr")
conflicted::conflict_prefer("filter", "dplyr")
conflict_prefer("box", "shinydashboard")
# setwd("~/Desktop/Final")
tl <- read_excel("data/TL2019.xlsx")
setwd("~/RProjects/tl_forcasting")
# setwd("~/Desktop/Final")
tl <- read_excel("data/TL2019.xlsx")
# convert data from wide to long format at state level, i.e. combine drop & pick
tl_state_all <- tl %>%
select(`Pick State`, `Ship Month`, `Shipment Count`) %>%
rename(State = `Pick State`) %>%
rbind(
tl %>%
select(`Drop State`, `Ship Month`, `Shipment Count`) %>%
rename(State = `Drop State`)
)
# convert data from wide to long format at city level, i.e. combine drop & pick
tl_city_all <- tl %>%
select(`PickCity`, `Ship Month`, `Shipment Count`) %>%
rename(City = `PickCity`) %>%
rbind(tl %>%
select(`Drop City`, `Ship Month`, `Shipment Count`) %>%
rename(City = `Drop City`))
# generate states level data for each plot
# 1
states1 <-
geojsonio::geojson_read("data/us-states.geojson", what = "sp")
states1$state_abb <- state.abb[match(states1@data$name, state.name)]
states1@data <- tl_state_all %>%
group_by(State) %>%
summarize(shipment = sum(`Shipment Count`)) %>%
right_join(states1@data,
by = c("State" = "state_abb"),
multiple = "all")
# 2
states2 <-
geojsonio::geojson_read("data/us-states.geojson", what = "sp")
states2$state_abb <- state.abb[match(states2@data$name, state.name)]
states2@data <- tl_state_all %>%
group_by(State, `Ship Month`) %>%
summarize(shipment = sum(`Shipment Count`)) %>%
right_join(states2@data,
by = c("State" = "state_abb"),
multiple = "all") %>%
distinct()
# generate Chicago data
states3 <-
geojsonio::geojson_read("data/us-states.geojson", what = "sp")
states3$state_abb <- state.abb[match(states3@data$name, state.name)]
states3@data <- tl %>%
filter(`Pick State` == "IL") %>%
group_by(`Drop State`) %>%
summarize(shipment = sum(`Shipment Count`)) %>%
right_join(states3@data,
by = c("Drop State" = "state_abb"),
multiple = "all")
# generate city level data for each plot
cities <-
read_sf("data/ne_10m_populated_places/ne_10m_populated_places.shp",
layer = "ne_10m_populated_places") %>%
filter(SOV0NAME == "United States", ADM0_A3 == "USA") %>%
mutate(CITY = toupper(NAME)) %>%
select(CITY, LONGITUDE, LATITUDE, POP_MAX)
# cities data, months combined
cities1 <- cities %>%
inner_join(tl_city_all %>%
group_by(City) %>%
summarize(shipment = sum(`Shipment Count`)),
by = c("CITY" = "City"))
# cities data, months separated
cities2 <- cities %>%
inner_join(
tl_city_all %>%
group_by(City, `Ship Month`) %>%
summarize(shipment = sum(`Shipment Count`)),
by = c("CITY" = "City"),
multiple = "all"
)
#### #### YEAR 2020 ########
ibtl <- read_excel("data/IB TL Data.xlsx")
ibtl_2020 <- ibtl %>% filter(`Ship Year` == 2020)
# select pairs that have data each month
ibtl_2020 %>%
group_by(`Pick State`, `Drop State`) %>%
summarize(dist_month = n_distinct(`Ship Month`)) %>%
filter(dist_month == 12) -> df_dist_month
# select top 5 origins
ibtl_2020 %>%
filter(
`Pick State` %in% df_dist_month$`Pick State`,
`Drop State` %in% df_dist_month$`Drop State`
) %>%
group_by(`Pick State`) %>%
summarize(total_n = sum(`Shipment Count`)) %>%
arrange(desc(total_n)) %>%
head(10)
ibtl_2020 %>%
filter(
`Pick State` %in% df_dist_month$`Pick State`,
`Drop State` %in% df_dist_month$`Drop State`
) %>%
group_by(`Pick State`) %>%
summarize(total_n = sum(`Shipment Count`)) %>%
arrange(desc(total_n)) %>%
head(10) -> top5_origin
top5_origin
ibtl_2020 %>%
filter(`Pick State` %in% top5_origin$`Pick State`) %>%
group_by(`Pick State`, `Drop State`) %>%
summarize(total_n = sum(`Shipment Count`)) %>%
top_n(10, total_n) %>%
arrange(desc(total_n), .by_group = TRUE) -> final_comb
final_comb
View(final_comb)
shiny::runApp()
